数据结构：相互之间存在一种或者多种特定关系的数据元素的集合
数据对象：具有相同性质的数据元素的集合，是数据的一个子集

数据结构的三要素： 逻辑结构 物理结构和数据的运算

总结：
1：若采用顺序存储，则各个数据元素在物理上必须是连续的，
   若采用非顺序存储，则各个数据元素在物理上可以是离散的
   
2：数据的存储结构会影响存储空间分配的方便程度 
3: 数据的存储结构会影响对数据运算的速度  

数据类型：一个值的集合和定义在此集合上的一组操作的总称


算法的效率：
1:时间复杂度 T(n)=O(n)   
	o(1) < o(log2n) < o(n) < o(mlo2n) < o(n^2 )< o(n^3) < o(2^n) < o(n!) < o(n^n)
	秘诀：常对幂指阶
	加法规则 乘法规则
	
结论：1：顺序执行的代码智慧影响常数项，可以忽略	
	  2：只需找循环中的一个基本操作 分析她的执行次数与n的关系即可
	  3：如果有多层循环嵌套，只需关注最深层循环了多少次(内层共执行n^2次)
	  
	  
2:空间复杂度
	无论问题的规模怎么变，算法运行所需的内存空间都是固定的常量，算法空间复杂度为：S(n) = o(1)
	算法原地工作：算法所需内存空间为常量
	
	s(n) = o(n) 只需关注存储空间大小与问题规模相关的变量
	
	函数调用增加内存开销	·
	
	函数递归调用代码的内存开销
	s(n) = o(n)   kb 一次函数调用 n次  空间复杂度就等于递归调用的深度和问题规模n的数量级s
	
考点：时间复杂度(考研经常考)	 空间复杂度 不太常考


第二章：线性表
定义：具有相同数据的 n (n >=0)个数据元素的有序 序列，其中n为表长 当n=0是线性表就是一个空表 
若用L表明 L=(a1,a2,..ai,ai+1..,an); (为序从1开始 )
除了第一个元素外，每一个元素都有一个直接前驱，除了最后一个元素外，每一个元素都有且仅有一个直接后继

线性表的基本操作：  
	初始化和销毁操作 
	插入和删除
	按值查找和按位查找
	求表长
	输出操作
	判空操作
	
顺序表：用顺序存储的方式实现线性表
	顺序表的实现：静态分配
	#define MaxSize 10
	typedef struct
	{
		ElemType data[MaxSize]; //用静态数组 存放数据元素
		int length; //顺序表的当前长度
	}SqList; 
	
	
	
线性表：
		


	
	
	
	
